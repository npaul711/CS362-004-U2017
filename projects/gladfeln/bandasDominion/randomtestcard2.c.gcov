        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <assert.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:// code has been modified to fit my needs from gitHub user rogersza. It can be found at https://github.com/CS362-Winter-2016/cs362w16_rogersza/blob/master/dominion/randomtestcard.c
        -:   12:
        -:   13:// Council room card test
        -:   14:
        -:   15:#define NUM_TESTS 32
        -:   16:
function main called 1 returned 100% blocks executed 88%
        1:   17:int main() {
        1:   18:	struct gameState *g = NULL;
        1:   19:	int k[10] = {adventurer, gardens, minion, village, embargo, mine, cutpurse, baron, tribute, smithy};
        -:   20:	int i;
        1:   21:	int a = 0;
        1:   22:	int b = 0;
        -:   23:	
        1:   24:	for(i = 0; i < NUM_TESTS; i++){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   25:		int num_players = rand() % 4;
call    0 returned 100%
        1:   26:		int rand_seed = rand();
call    0 returned 100%
        1:   27:		int player = 0;
        -:   28:		
        1:   29:		g = malloc(sizeof(struct gameState));
        1:   30:		int status = initializeGame(num_players, k, rand_seed, g);
call    0 returned 100%
        -:   31:		
        1:   32:		g->deckCount[player] = rand() % MAX_DECK;
call    0 returned 100%
        1:   33:		g->discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
        1:   34:		g->handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
        -:   35:		
        1:   36:		int pre_count = g->handCount[player];
        1:   37:		cardEffect(council_room, 1, 1, 1, g, 0, 0);
call    0 returned 100%
        -:   38:		
        1:   39:		int post_count = g->handCount[player];
        -:   40:		
        1:   41:		if((pre_count + 4) == post_count) a++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:   42:		else b++;
        -:   43:		
        1:   44:		printf("Test %d/%d complete\n", i + 1, NUM_TESTS);
call    0 returned 100%
        1:   45:		free(g);
        -:   46:		
        1:   47:		return 0;
        -:   48:	}
        -:   49:	
    #####:   50:	return 0;
        -:   51:}
