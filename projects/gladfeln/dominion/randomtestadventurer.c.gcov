        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <assert.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:// code has been modified to fit my needs from gitHub user maysw. It can be found at https://github.com/maysw/CS-362/blob/Assignment-3/dominion/randomtestadventurer.c
        -:   12:// Adventurer card test
        -:   13:
        -:   14:#define NUM_TESTS 10
        -:   15:#define CARD_COUNT treasure_map
        -:   16:
        1:   17:int main() {
        -:   18:	struct gameState G;
        1:   19:	int k[10] = {adventurer, gardens, minion, village, embargo, mine, cutpurse, baron, tribute, smithy};
        -:   20:	
        -:   21:	int i;
        -:   22:	int j;
        -:   23:	int player_count;
        -:   24:	int player;
        -:   25:	int seed;
        -:   26:	int deck_treasures;
        -:   27:	int hand_count;
        1:   28:	int pre_count = 0;
        1:   29:	int post_count = 0;
        -:   30:	
        1:   31:	srand(time(NULL));
        -:   32:
        1:   33:	printf("\nAdventurer card test ....\n");
        -:   34:	
        1:   35:	for(i = 0; i < NUM_TESTS; i++) {
        1:   36:		seed = rand() % 100;
        1:   37:		if(initializeGame(player_count, k, seed, &G) == -1) {
        1:   38:			printf("Error initializing game\n");
        1:   39:			exit(0);
        -:   40:			}
        -:   41:	}
    #####:   42:	player = rand() % player_count;
    #####:   43:	G.whoseTurn = player;
    #####:   44:	G.numActions = 1;
    #####:   45:	G.handCount[player] = 5;
    #####:   46:	G.deckCount[player] = rand() % MAX_HAND;
    #####:   47:	G.discardCount[player] = 0;
        -:   48:	
    #####:   49:	for(j = 0; j < G.deckCount[player]; j++) {
    #####:   50:		G.deck[player][j] = rand() % CARD_COUNT;
    #####:   51:		if(G.deck[player][j] >= copper && G.deck[player][j] <= gold) {
    #####:   52:			deck_treasures++;
        -:   53:		}
        -:   54:	}
    #####:   55:	for(j = 0; j < G.handCount[player]; j++) {
    #####:   56:		if(G.hand[player][j] >= copper && G.hand[player][j] <= gold) {
    #####:   57:			pre_count++;
        -:   58:		}
    #####:   59:	G.hand[player][0] = adventurer;
    #####:   60:	hand_count = G.handCount[player];
    #####:   61:	playCard(0, 0, 0, 0, &G);
    #####:   62:	if(hand_count + 2 != G.handCount[player]) {
    #####:   63:		printf("Error - two cards into player hand\n");
    #####:   64:		exit(0);
        -:   65:	}
        -:   66:	
    #####:   67:	for(j = 0; j < G.handCount[player]; j++) {
    #####:   68:		if(G.hand[player][j] >= copper && G.hand[player][j] <= gold){
    #####:   69:			post_count++;
        -:   70:		}
        -:   71:	}
        -:   72:	
    #####:   73:	printf("Pre %d\n", pre_count);
    #####:   74:	printf("Post %d\n", post_count);
        -:   75:
    #####:   76:	if(pre_count +2 != post_count) {
    #####:   77:		printf("Error - two cards into player hand\n");
        -:   78:	}
        -:   79:	
    #####:   80:	printf("i= %d \n", i);
        -:   81:	}
    #####:   82:	printf("End of adventurer test\n");
        -:   83:
    #####:   84:	return 0;
        -:   85:}
