        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    41584:   14:int compare(const void* a, const void* b) {
    41584:   15:  if (*(int*)a > *(int*)b)
      694:   16:    return 1;
    40890:   17:  if (*(int*)a < *(int*)b)
    10188:   18:    return -1;
    30702:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      515:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      485:   83:  else if (numPlayers == 3)
        -:   84:    {
      485:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      515:   95:      state->supplyCount[estate] = 8;
      515:   96:      state->supplyCount[duchy] = 8;
      515:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      485:  101:      state->supplyCount[estate] = 12;
      485:  102:      state->supplyCount[duchy] = 12;
      485:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      515:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      485:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3485:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2485:  146:      state->deckCount[i] = 0;
     9940:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7455:  149:	  state->deck[i][j] = estate;
     7455:  150:	  state->deckCount[i]++;
        -:  151:	}
    19880:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17395:  154:	  state->deck[i][j] = copper;
    17395:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3485:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2485:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3485:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2485:  172:      state->handCount[i] = 0;
     2485:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2487:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2487:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2487:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2487:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30698:  220:  while (state->deckCount[player] > 0) {
    25724:  221:    card = floor(Random() * state->deckCount[player]);
    25724:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25724:  223:    newDeckPos++;
   175428:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   149704:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25724:  227:    state->deckCount[player]--;
        -:  228:  }
    28211:  229:  for (i = 0; i < newDeckPos; i++) {
    25724:  230:    state->deck[player][i] = newDeck[i];
    25724:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2487:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      876:  539:    for (i = 0; i < state->discardCount[player];i++){
      874:  540:      state->deck[player][i] = state->discard[player][i];
      874:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      752:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        3: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      997: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      997: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      997: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      997: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3478: 1447:	  state->coins += 1;
        -: 1448:	}
     1522: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1522: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    38489:   14:int compare(const void* a, const void* b) {
    38489:   15:  if (*(int*)a > *(int*)b)
    #####:   16:    return 1;
    38489:   17:  if (*(int*)a < *(int*)b)
    10140:   18:    return -1;
    28349:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      478:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      522:   83:  else if (numPlayers == 3)
        -:   84:    {
      522:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      478:   95:      state->supplyCount[estate] = 8;
      478:   96:      state->supplyCount[duchy] = 8;
      478:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      522:  101:      state->supplyCount[estate] = 12;
      522:  102:      state->supplyCount[duchy] = 12;
      522:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      478:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      522:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3522:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2522:  146:      state->deckCount[i] = 0;
    10088:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7566:  149:	  state->deck[i][j] = estate;
     7566:  150:	  state->deckCount[i]++;
        -:  151:	}
    20176:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17654:  154:	  state->deck[i][j] = copper;
    17654:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3522:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2522:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3522:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2522:  172:      state->handCount[i] = 0;
     2522:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2524:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2524:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2524:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2524:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30469:  220:  while (state->deckCount[player] > 0) {
    25421:  221:    card = floor(Random() * state->deckCount[player]);
    25421:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25421:  223:    newDeckPos++;
    89028:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    63607:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25421:  227:    state->deckCount[player]--;
        -:  228:  }
    27945:  229:  for (i = 0; i < newDeckPos; i++) {
    25421:  230:    state->deck[player][i] = newDeck[i];
    25421:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2524:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      203:  539:    for (i = 0; i < state->discardCount[player];i++){
      201:  540:      state->deck[player][i] = state->discard[player][i];
      201:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      744:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        2: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      998: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      998: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      998: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      998: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3501: 1447:	  state->coins += 1;
        -: 1448:	}
     1499: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1499: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    44793:   14:int compare(const void* a, const void* b) {
    44793:   15:  if (*(int*)a > *(int*)b)
     2266:   16:    return 1;
    42527:   17:  if (*(int*)a < *(int*)b)
    10894:   18:    return -1;
    31633:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      531:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      469:   83:  else if (numPlayers == 3)
        -:   84:    {
      469:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      531:   95:      state->supplyCount[estate] = 8;
      531:   96:      state->supplyCount[duchy] = 8;
      531:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      469:  101:      state->supplyCount[estate] = 12;
      469:  102:      state->supplyCount[duchy] = 12;
      469:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      531:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      469:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3469:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2469:  146:      state->deckCount[i] = 0;
     9876:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7407:  149:	  state->deck[i][j] = estate;
     7407:  150:	  state->deckCount[i]++;
        -:  151:	}
    19752:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17283:  154:	  state->deck[i][j] = copper;
    17283:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3469:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2469:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3469:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2469:  172:      state->handCount[i] = 0;
     2469:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2472:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2472:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2472:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2472:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30981:  220:  while (state->deckCount[player] > 0) {
    26037:  221:    card = floor(Random() * state->deckCount[player]);
    26037:  222:    newDeck[newDeckPos] = state->deck[player][card];
    26037:  223:    newDeckPos++;
   234114:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   208077:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    26037:  227:    state->deckCount[player]--;
        -:  228:  }
    28509:  229:  for (i = 0; i < newDeckPos; i++) {
    26037:  230:    state->deck[player][i] = newDeck[i];
    26037:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2472:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
     1350:  539:    for (i = 0; i < state->discardCount[player];i++){
     1347:  540:      state->deck[player][i] = state->discard[player][i];
     1347:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        3:  544:    state->deckCount[player] = state->discardCount[player];
        3:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        3:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        3:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        3:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        3:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        3:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        3:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  569:    state->deckCount[player]--;
        3:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5997:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5997:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5997:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5997:  582:    state->deckCount[player]--;
     5997:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      767:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3507: 1447:	  state->coins += 1;
        -: 1448:	}
     1493: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1493: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    38434:   14:int compare(const void* a, const void* b) {
    38434:   15:  if (*(int*)a > *(int*)b)
      176:   16:    return 1;
    38258:   17:  if (*(int*)a < *(int*)b)
     9919:   18:    return -1;
    28339:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      534:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      466:   83:  else if (numPlayers == 3)
        -:   84:    {
      466:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      534:   95:      state->supplyCount[estate] = 8;
      534:   96:      state->supplyCount[duchy] = 8;
      534:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      466:  101:      state->supplyCount[estate] = 12;
      466:  102:      state->supplyCount[duchy] = 12;
      466:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      534:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      466:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3466:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2466:  146:      state->deckCount[i] = 0;
     9864:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7398:  149:	  state->deck[i][j] = estate;
     7398:  150:	  state->deckCount[i]++;
        -:  151:	}
    19728:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17262:  154:	  state->deck[i][j] = copper;
    17262:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3466:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2466:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3466:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2466:  172:      state->handCount[i] = 0;
     2466:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2467:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2467:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2467:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2467:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    29918:  220:  while (state->deckCount[player] > 0) {
    24984:  221:    card = floor(Random() * state->deckCount[player]);
    24984:  222:    newDeck[newDeckPos] = state->deck[player][card];
    24984:  223:    newDeckPos++;
   106633:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    81649:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    24984:  227:    state->deckCount[player]--;
        -:  228:  }
    27451:  229:  for (i = 0; i < newDeckPos; i++) {
    24984:  230:    state->deck[player][i] = newDeck[i];
    24984:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2467:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      325:  539:    for (i = 0; i < state->discardCount[player];i++){
      324:  540:      state->deck[player][i] = state->discard[player][i];
      324:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      754:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        2: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      998: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      998: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      998: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      998: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3492: 1447:	  state->coins += 1;
        -: 1448:	}
     1508: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1508: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39793:   14:int compare(const void* a, const void* b) {
    39793:   15:  if (*(int*)a > *(int*)b)
      483:   16:    return 1;
    39310:   17:  if (*(int*)a < *(int*)b)
    10193:   18:    return -1;
    29117:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      491:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      509:   83:  else if (numPlayers == 3)
        -:   84:    {
      509:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      491:   95:      state->supplyCount[estate] = 8;
      491:   96:      state->supplyCount[duchy] = 8;
      491:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      509:  101:      state->supplyCount[estate] = 12;
      509:  102:      state->supplyCount[duchy] = 12;
      509:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      491:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      509:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3509:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2509:  146:      state->deckCount[i] = 0;
    10036:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7527:  149:	  state->deck[i][j] = estate;
     7527:  150:	  state->deckCount[i]++;
        -:  151:	}
    20072:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17563:  154:	  state->deck[i][j] = copper;
    17563:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3509:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2509:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3509:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2509:  172:      state->handCount[i] = 0;
     2509:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2510:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2510:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2510:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2510:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30528:  220:  while (state->deckCount[player] > 0) {
    25508:  221:    card = floor(Random() * state->deckCount[player]);
    25508:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25508:  223:    newDeckPos++;
   122367:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    96859:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25508:  227:    state->deckCount[player]--;
        -:  228:  }
    28018:  229:  for (i = 0; i < newDeckPos; i++) {
    25508:  230:    state->deck[player][i] = newDeck[i];
    25508:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2510:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      419:  539:    for (i = 0; i < state->discardCount[player];i++){
      418:  540:      state->deck[player][i] = state->discard[player][i];
      418:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      755:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3500: 1447:	  state->coins += 1;
        -: 1448:	}
     1500: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1500: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39902:   14:int compare(const void* a, const void* b) {
    39902:   15:  if (*(int*)a > *(int*)b)
      139:   16:    return 1;
    39763:   17:  if (*(int*)a < *(int*)b)
    10048:   18:    return -1;
    29715:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      526:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      474:   83:  else if (numPlayers == 3)
        -:   84:    {
      474:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      526:   95:      state->supplyCount[estate] = 8;
      526:   96:      state->supplyCount[duchy] = 8;
      526:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      474:  101:      state->supplyCount[estate] = 12;
      474:  102:      state->supplyCount[duchy] = 12;
      474:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      526:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      474:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3474:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2474:  146:      state->deckCount[i] = 0;
     9896:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7422:  149:	  state->deck[i][j] = estate;
     7422:  150:	  state->deckCount[i]++;
        -:  151:	}
    19792:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17318:  154:	  state->deck[i][j] = copper;
    17318:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3474:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2474:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3474:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2474:  172:      state->handCount[i] = 0;
     2474:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2478:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2478:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2478:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2478:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30421:  220:  while (state->deckCount[player] > 0) {
    25465:  221:    card = floor(Random() * state->deckCount[player]);
    25465:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25465:  223:    newDeckPos++;
   122214:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    96749:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25465:  227:    state->deckCount[player]--;
        -:  228:  }
    27943:  229:  for (i = 0; i < newDeckPos; i++) {
    25465:  230:    state->deck[player][i] = newDeck[i];
    25465:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2478:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      729:  539:    for (i = 0; i < state->discardCount[player];i++){
      725:  540:      state->deck[player][i] = state->discard[player][i];
      725:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        4:  544:    state->deckCount[player] = state->discardCount[player];
        4:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        4:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        4:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        4:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        4:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        4:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        4:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  569:    state->deckCount[player]--;
        4:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5996:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5996:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5996:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5996:  582:    state->deckCount[player]--;
     5996:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      764:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3470: 1447:	  state->coins += 1;
        -: 1448:	}
     1530: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1530: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    38155:   14:int compare(const void* a, const void* b) {
    38155:   15:  if (*(int*)a > *(int*)b)
    #####:   16:    return 1;
    38155:   17:  if (*(int*)a < *(int*)b)
     9896:   18:    return -1;
    28259:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      526:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      474:   83:  else if (numPlayers == 3)
        -:   84:    {
      474:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      526:   95:      state->supplyCount[estate] = 8;
      526:   96:      state->supplyCount[duchy] = 8;
      526:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      474:  101:      state->supplyCount[estate] = 12;
      474:  102:      state->supplyCount[duchy] = 12;
      474:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      526:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      474:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3474:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2474:  146:      state->deckCount[i] = 0;
     9896:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7422:  149:	  state->deck[i][j] = estate;
     7422:  150:	  state->deckCount[i]++;
        -:  151:	}
    19792:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17318:  154:	  state->deck[i][j] = copper;
    17318:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3474:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2474:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3474:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2474:  172:      state->handCount[i] = 0;
     2474:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2476:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2476:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2476:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2476:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    29991:  220:  while (state->deckCount[player] > 0) {
    25039:  221:    card = floor(Random() * state->deckCount[player]);
    25039:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25039:  223:    newDeckPos++;
    92101:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    67062:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25039:  227:    state->deckCount[player]--;
        -:  228:  }
    27515:  229:  for (i = 0; i < newDeckPos; i++) {
    25039:  230:    state->deck[player][i] = newDeck[i];
    25039:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2476:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      301:  539:    for (i = 0; i < state->discardCount[player];i++){
      299:  540:      state->deck[player][i] = state->discard[player][i];
      299:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      757:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        4: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      996: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      996: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      996: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      996: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3504: 1447:	  state->coins += 1;
        -: 1448:	}
     1496: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1496: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    40257:   14:int compare(const void* a, const void* b) {
    40257:   15:  if (*(int*)a > *(int*)b)
     1381:   16:    return 1;
    38876:   17:  if (*(int*)a < *(int*)b)
    10612:   18:    return -1;
    28264:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      501:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      499:   83:  else if (numPlayers == 3)
        -:   84:    {
      499:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      501:   95:      state->supplyCount[estate] = 8;
      501:   96:      state->supplyCount[duchy] = 8;
      501:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      499:  101:      state->supplyCount[estate] = 12;
      499:  102:      state->supplyCount[duchy] = 12;
      499:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      501:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      499:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3499:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2499:  146:      state->deckCount[i] = 0;
     9996:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7497:  149:	  state->deck[i][j] = estate;
     7497:  150:	  state->deckCount[i]++;
        -:  151:	}
    19992:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17493:  154:	  state->deck[i][j] = copper;
    17493:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3499:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2499:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3499:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2499:  172:      state->handCount[i] = 0;
     2499:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2500:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2500:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2500:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2500:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30371:  220:  while (state->deckCount[player] > 0) {
    25371:  221:    card = floor(Random() * state->deckCount[player]);
    25371:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25371:  223:    newDeckPos++;
   116300:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    90929:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25371:  227:    state->deckCount[player]--;
        -:  228:  }
    27871:  229:  for (i = 0; i < newDeckPos; i++) {
    25371:  230:    state->deck[player][i] = newDeck[i];
    25371:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2500:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      382:  539:    for (i = 0; i < state->discardCount[player];i++){
      381:  540:      state->deck[player][i] = state->discard[player][i];
      381:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      744:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3494: 1447:	  state->coins += 1;
        -: 1448:	}
     1506: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1506: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39731:   14:int compare(const void* a, const void* b) {
    39731:   15:  if (*(int*)a > *(int*)b)
      176:   16:    return 1;
    39555:   17:  if (*(int*)a < *(int*)b)
    10050:   18:    return -1;
    29505:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      502:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      498:   83:  else if (numPlayers == 3)
        -:   84:    {
      498:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      502:   95:      state->supplyCount[estate] = 8;
      502:   96:      state->supplyCount[duchy] = 8;
      502:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      498:  101:      state->supplyCount[estate] = 12;
      498:  102:      state->supplyCount[duchy] = 12;
      498:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      502:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      498:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3498:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2498:  146:      state->deckCount[i] = 0;
     9992:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7494:  149:	  state->deck[i][j] = estate;
     7494:  150:	  state->deckCount[i]++;
        -:  151:	}
    19984:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17486:  154:	  state->deck[i][j] = copper;
    17486:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3498:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2498:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3498:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2498:  172:      state->handCount[i] = 0;
     2498:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2501:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2501:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2501:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2501:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30539:  220:  while (state->deckCount[player] > 0) {
    25537:  221:    card = floor(Random() * state->deckCount[player]);
    25537:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25537:  223:    newDeckPos++;
   121068:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    95531:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25537:  227:    state->deckCount[player]--;
        -:  228:  }
    28038:  229:  for (i = 0; i < newDeckPos; i++) {
    25537:  230:    state->deck[player][i] = newDeck[i];
    25537:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2501:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      560:  539:    for (i = 0; i < state->discardCount[player];i++){
      557:  540:      state->deck[player][i] = state->discard[player][i];
      557:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        3:  544:    state->deckCount[player] = state->discardCount[player];
        3:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        3:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        3:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        3:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        3:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        3:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        3:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  569:    state->deckCount[player]--;
        3:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5997:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5997:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5997:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5997:  582:    state->deckCount[player]--;
     5997:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      741:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        2: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      998: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      998: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      998: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      998: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3486: 1447:	  state->coins += 1;
        -: 1448:	}
     1514: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1514: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    42688:   14:int compare(const void* a, const void* b) {
    42688:   15:  if (*(int*)a > *(int*)b)
     2120:   16:    return 1;
    40568:   17:  if (*(int*)a < *(int*)b)
    10815:   18:    return -1;
    29753:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      520:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      480:   83:  else if (numPlayers == 3)
        -:   84:    {
      480:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      520:   95:      state->supplyCount[estate] = 8;
      520:   96:      state->supplyCount[duchy] = 8;
      520:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      480:  101:      state->supplyCount[estate] = 12;
      480:  102:      state->supplyCount[duchy] = 12;
      480:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      520:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      480:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3480:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2480:  146:      state->deckCount[i] = 0;
     9920:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7440:  149:	  state->deck[i][j] = estate;
     7440:  150:	  state->deckCount[i]++;
        -:  151:	}
    19840:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17360:  154:	  state->deck[i][j] = copper;
    17360:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3480:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2480:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3480:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2480:  172:      state->handCount[i] = 0;
     2480:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2482:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2482:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2482:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2482:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30623:  220:  while (state->deckCount[player] > 0) {
    25659:  221:    card = floor(Random() * state->deckCount[player]);
    25659:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25659:  223:    newDeckPos++;
   173260:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   147601:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25659:  227:    state->deckCount[player]--;
        -:  228:  }
    28141:  229:  for (i = 0; i < newDeckPos; i++) {
    25659:  230:    state->deck[player][i] = newDeck[i];
    25659:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2482:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      861:  539:    for (i = 0; i < state->discardCount[player];i++){
      859:  540:      state->deck[player][i] = state->discard[player][i];
      859:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      780:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        2: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      998: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      998: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      998: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      998: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3458: 1447:	  state->coins += 1;
        -: 1448:	}
     1542: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1542: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39033:   14:int compare(const void* a, const void* b) {
    39033:   15:  if (*(int*)a > *(int*)b)
    #####:   16:    return 1;
    39033:   17:  if (*(int*)a < *(int*)b)
     9970:   18:    return -1;
    29063:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      513:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      487:   83:  else if (numPlayers == 3)
        -:   84:    {
      487:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      513:   95:      state->supplyCount[estate] = 8;
      513:   96:      state->supplyCount[duchy] = 8;
      513:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      487:  101:      state->supplyCount[estate] = 12;
      487:  102:      state->supplyCount[duchy] = 12;
      487:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      513:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      487:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3487:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2487:  146:      state->deckCount[i] = 0;
     9948:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7461:  149:	  state->deck[i][j] = estate;
     7461:  150:	  state->deckCount[i]++;
        -:  151:	}
    19896:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17409:  154:	  state->deck[i][j] = copper;
    17409:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3487:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2487:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3487:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2487:  172:      state->handCount[i] = 0;
     2487:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2489:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2489:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2489:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2489:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30299:  220:  while (state->deckCount[player] > 0) {
    25321:  221:    card = floor(Random() * state->deckCount[player]);
    25321:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25321:  223:    newDeckPos++;
   107921:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    82600:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25321:  227:    state->deckCount[player]--;
        -:  228:  }
    27810:  229:  for (i = 0; i < newDeckPos; i++) {
    25321:  230:    state->deck[player][i] = newDeck[i];
    25321:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2489:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      453:  539:    for (i = 0; i < state->discardCount[player];i++){
      451:  540:      state->deck[player][i] = state->discard[player][i];
      451:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      750:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3504: 1447:	  state->coins += 1;
        -: 1448:	}
     1496: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1496: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    41689:   14:int compare(const void* a, const void* b) {
    41689:   15:  if (*(int*)a > *(int*)b)
     1775:   16:    return 1;
    39914:   17:  if (*(int*)a < *(int*)b)
    10860:   18:    return -1;
    29054:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      476:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      524:   83:  else if (numPlayers == 3)
        -:   84:    {
      524:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      476:   95:      state->supplyCount[estate] = 8;
      476:   96:      state->supplyCount[duchy] = 8;
      476:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      524:  101:      state->supplyCount[estate] = 12;
      524:  102:      state->supplyCount[duchy] = 12;
      524:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      476:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      524:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3524:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2524:  146:      state->deckCount[i] = 0;
    10096:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7572:  149:	  state->deck[i][j] = estate;
     7572:  150:	  state->deckCount[i]++;
        -:  151:	}
    20192:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17668:  154:	  state->deck[i][j] = copper;
    17668:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3524:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2524:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3524:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2524:  172:      state->handCount[i] = 0;
     2524:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2526:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2526:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2526:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2526:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30842:  220:  while (state->deckCount[player] > 0) {
    25790:  221:    card = floor(Random() * state->deckCount[player]);
    25790:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25790:  223:    newDeckPos++;
   141367:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   115577:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25790:  227:    state->deckCount[player]--;
        -:  228:  }
    28316:  229:  for (i = 0; i < newDeckPos; i++) {
    25790:  230:    state->deck[player][i] = newDeck[i];
    25790:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2526:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      552:  539:    for (i = 0; i < state->discardCount[player];i++){
      550:  540:      state->deck[player][i] = state->discard[player][i];
      550:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      742:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3548: 1447:	  state->coins += 1;
        -: 1448:	}
     1452: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1452: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39293:   14:int compare(const void* a, const void* b) {
    39293:   15:  if (*(int*)a > *(int*)b)
      779:   16:    return 1;
    38514:   17:  if (*(int*)a < *(int*)b)
    10415:   18:    return -1;
    28099:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      484:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      516:   83:  else if (numPlayers == 3)
        -:   84:    {
      516:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      484:   95:      state->supplyCount[estate] = 8;
      484:   96:      state->supplyCount[duchy] = 8;
      484:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      516:  101:      state->supplyCount[estate] = 12;
      516:  102:      state->supplyCount[duchy] = 12;
      516:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      484:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      516:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3516:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2516:  146:      state->deckCount[i] = 0;
    10064:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7548:  149:	  state->deck[i][j] = estate;
     7548:  150:	  state->deckCount[i]++;
        -:  151:	}
    20128:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17612:  154:	  state->deck[i][j] = copper;
    17612:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3516:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2516:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3516:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2516:  172:      state->handCount[i] = 0;
     2516:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2517:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2517:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2517:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2517:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30431:  220:  while (state->deckCount[player] > 0) {
    25397:  221:    card = floor(Random() * state->deckCount[player]);
    25397:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25397:  223:    newDeckPos++;
    95489:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    70092:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25397:  227:    state->deckCount[player]--;
        -:  228:  }
    27914:  229:  for (i = 0; i < newDeckPos; i++) {
    25397:  230:    state->deck[player][i] = newDeck[i];
    25397:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2517:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      238:  539:    for (i = 0; i < state->discardCount[player];i++){
      237:  540:      state->deck[player][i] = state->discard[player][i];
      237:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      742:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        3: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      997: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      997: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      997: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      997: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3480: 1447:	  state->coins += 1;
        -: 1448:	}
     1520: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1520: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    42579:   14:int compare(const void* a, const void* b) {
    42579:   15:  if (*(int*)a > *(int*)b)
     1501:   16:    return 1;
    41078:   17:  if (*(int*)a < *(int*)b)
    10701:   18:    return -1;
    30377:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      495:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      505:   83:  else if (numPlayers == 3)
        -:   84:    {
      505:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      495:   95:      state->supplyCount[estate] = 8;
      495:   96:      state->supplyCount[duchy] = 8;
      495:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      505:  101:      state->supplyCount[estate] = 12;
      505:  102:      state->supplyCount[duchy] = 12;
      505:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      495:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      505:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3505:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2505:  146:      state->deckCount[i] = 0;
    10020:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7515:  149:	  state->deck[i][j] = estate;
     7515:  150:	  state->deckCount[i]++;
        -:  151:	}
    20040:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17535:  154:	  state->deck[i][j] = copper;
    17535:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3505:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2505:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3505:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2505:  172:      state->handCount[i] = 0;
     2505:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2509:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2509:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2509:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2509:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    31020:  220:  while (state->deckCount[player] > 0) {
    26002:  221:    card = floor(Random() * state->deckCount[player]);
    26002:  222:    newDeck[newDeckPos] = state->deck[player][card];
    26002:  223:    newDeckPos++;
   151041:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   125039:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    26002:  227:    state->deckCount[player]--;
        -:  228:  }
    28511:  229:  for (i = 0; i < newDeckPos; i++) {
    26002:  230:    state->deck[player][i] = newDeck[i];
    26002:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2509:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      956:  539:    for (i = 0; i < state->discardCount[player];i++){
      952:  540:      state->deck[player][i] = state->discard[player][i];
      952:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        4:  544:    state->deckCount[player] = state->discardCount[player];
        4:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        4:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        4:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        4:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        4:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        4:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        4:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  569:    state->deckCount[player]--;
        4:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5996:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5996:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5996:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5996:  582:    state->deckCount[player]--;
     5996:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      766:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
    #####: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
     1000: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
     1000: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
     1000: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
     1000: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3516: 1447:	  state->coins += 1;
        -: 1448:	}
     1484: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1484: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    41037:   14:int compare(const void* a, const void* b) {
    41037:   15:  if (*(int*)a > *(int*)b)
     1740:   16:    return 1;
    39297:   17:  if (*(int*)a < *(int*)b)
    10723:   18:    return -1;
    28574:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      504:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      496:   83:  else if (numPlayers == 3)
        -:   84:    {
      496:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      504:   95:      state->supplyCount[estate] = 8;
      504:   96:      state->supplyCount[duchy] = 8;
      504:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      496:  101:      state->supplyCount[estate] = 12;
      496:  102:      state->supplyCount[duchy] = 12;
      496:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      504:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      496:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3496:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2496:  146:      state->deckCount[i] = 0;
     9984:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7488:  149:	  state->deck[i][j] = estate;
     7488:  150:	  state->deckCount[i]++;
        -:  151:	}
    19968:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17472:  154:	  state->deck[i][j] = copper;
    17472:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3496:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2496:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3496:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2496:  172:      state->handCount[i] = 0;
     2496:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2498:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2498:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2498:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2498:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30463:  220:  while (state->deckCount[player] > 0) {
    25467:  221:    card = floor(Random() * state->deckCount[player]);
    25467:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25467:  223:    newDeckPos++;
   135953:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   110486:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25467:  227:    state->deckCount[player]--;
        -:  228:  }
    27965:  229:  for (i = 0; i < newDeckPos; i++) {
    25467:  230:    state->deck[player][i] = newDeck[i];
    25467:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2498:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      509:  539:    for (i = 0; i < state->discardCount[player];i++){
      507:  540:      state->deck[player][i] = state->discard[player][i];
      507:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      774:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        2: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      998: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      998: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      998: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      998: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3489: 1447:	  state->coins += 1;
        -: 1448:	}
     1511: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1511: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39557:   14:int compare(const void* a, const void* b) {
    39557:   15:  if (*(int*)a > *(int*)b)
      194:   16:    return 1;
    39363:   17:  if (*(int*)a < *(int*)b)
     9951:   18:    return -1;
    29412:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      528:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      472:   83:  else if (numPlayers == 3)
        -:   84:    {
      472:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      528:   95:      state->supplyCount[estate] = 8;
      528:   96:      state->supplyCount[duchy] = 8;
      528:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      472:  101:      state->supplyCount[estate] = 12;
      472:  102:      state->supplyCount[duchy] = 12;
      472:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      528:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      472:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3472:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2472:  146:      state->deckCount[i] = 0;
     9888:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7416:  149:	  state->deck[i][j] = estate;
     7416:  150:	  state->deckCount[i]++;
        -:  151:	}
    19776:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17304:  154:	  state->deck[i][j] = copper;
    17304:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3472:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2472:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3472:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2472:  172:      state->handCount[i] = 0;
     2472:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2474:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2474:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2474:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2474:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30256:  220:  while (state->deckCount[player] > 0) {
    25308:  221:    card = floor(Random() * state->deckCount[player]);
    25308:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25308:  223:    newDeckPos++;
   126088:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   100780:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25308:  227:    state->deckCount[player]--;
        -:  228:  }
    27782:  229:  for (i = 0; i < newDeckPos; i++) {
    25308:  230:    state->deck[player][i] = newDeck[i];
    25308:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2474:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      590:  539:    for (i = 0; i < state->discardCount[player];i++){
      588:  540:      state->deck[player][i] = state->discard[player][i];
      588:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      769:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        3: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      997: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      997: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      997: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      997: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3510: 1447:	  state->coins += 1;
        -: 1448:	}
     1490: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1490: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    37530:   14:int compare(const void* a, const void* b) {
    37530:   15:  if (*(int*)a > *(int*)b)
    #####:   16:    return 1;
    37530:   17:  if (*(int*)a < *(int*)b)
    10008:   18:    return -1;
    27522:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      498:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      502:   83:  else if (numPlayers == 3)
        -:   84:    {
      502:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      498:   95:      state->supplyCount[estate] = 8;
      498:   96:      state->supplyCount[duchy] = 8;
      498:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      502:  101:      state->supplyCount[estate] = 12;
      502:  102:      state->supplyCount[duchy] = 12;
      502:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      498:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      502:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3502:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2502:  146:      state->deckCount[i] = 0;
    10008:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7506:  149:	  state->deck[i][j] = estate;
     7506:  150:	  state->deckCount[i]++;
        -:  151:	}
    20016:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17514:  154:	  state->deck[i][j] = copper;
    17514:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3502:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2502:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3502:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2502:  172:      state->handCount[i] = 0;
     2502:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2502:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2502:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2502:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2502:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30024:  220:  while (state->deckCount[player] > 0) {
    25020:  221:    card = floor(Random() * state->deckCount[player]);
    25020:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25020:  223:    newDeckPos++;
    81585:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    56565:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25020:  227:    state->deckCount[player]--;
        -:  228:  }
    27522:  229:  for (i = 0; i < newDeckPos; i++) {
    25020:  230:    state->deck[player][i] = newDeck[i];
    25020:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2502:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
    #####:  539:    for (i = 0; i < state->discardCount[player];i++){
    #####:  540:      state->deck[player][i] = state->discard[player][i];
    #####:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
    #####:  544:    state->deckCount[player] = state->discardCount[player];
    #####:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
    #####:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
    #####:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
    #####:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
    #####:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
    #####:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:    state->deckCount[player]--;
    #####:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     6000:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     6000:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     6000:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     6000:  582:    state->deckCount[player]--;
     6000:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      761:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3529: 1447:	  state->coins += 1;
        -: 1448:	}
     1471: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1471: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    41403:   14:int compare(const void* a, const void* b) {
    41403:   15:  if (*(int*)a > *(int*)b)
      436:   16:    return 1;
    40967:   17:  if (*(int*)a < *(int*)b)
    10148:   18:    return -1;
    30819:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      533:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      467:   83:  else if (numPlayers == 3)
        -:   84:    {
      467:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      533:   95:      state->supplyCount[estate] = 8;
      533:   96:      state->supplyCount[duchy] = 8;
      533:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      467:  101:      state->supplyCount[estate] = 12;
      467:  102:      state->supplyCount[duchy] = 12;
      467:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      533:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      467:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3467:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2467:  146:      state->deckCount[i] = 0;
     9868:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7401:  149:	  state->deck[i][j] = estate;
     7401:  150:	  state->deckCount[i]++;
        -:  151:	}
    19736:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17269:  154:	  state->deck[i][j] = copper;
    17269:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3467:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2467:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3467:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2467:  172:      state->handCount[i] = 0;
     2467:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2472:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2472:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2472:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2472:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30670:  220:  while (state->deckCount[player] > 0) {
    25726:  221:    card = floor(Random() * state->deckCount[player]);
    25726:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25726:  223:    newDeckPos++;
   152048:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   126322:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25726:  227:    state->deckCount[player]--;
        -:  228:  }
    28198:  229:  for (i = 0; i < newDeckPos; i++) {
    25726:  230:    state->deck[player][i] = newDeck[i];
    25726:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2472:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
     1061:  539:    for (i = 0; i < state->discardCount[player];i++){
     1056:  540:      state->deck[player][i] = state->discard[player][i];
     1056:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        5:  544:    state->deckCount[player] = state->discardCount[player];
        5:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        5:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        5:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        5:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        5:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        5:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        5:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        5:  569:    state->deckCount[player]--;
        5:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5995:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5995:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5995:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5995:  582:    state->deckCount[player]--;
     5995:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      759:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3525: 1447:	  state->coins += 1;
        -: 1448:	}
     1475: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1475: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39823:   14:int compare(const void* a, const void* b) {
    39823:   15:  if (*(int*)a > *(int*)b)
      742:   16:    return 1;
    39081:   17:  if (*(int*)a < *(int*)b)
    10160:   18:    return -1;
    28921:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      532:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      468:   83:  else if (numPlayers == 3)
        -:   84:    {
      468:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      532:   95:      state->supplyCount[estate] = 8;
      532:   96:      state->supplyCount[duchy] = 8;
      532:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      468:  101:      state->supplyCount[estate] = 12;
      468:  102:      state->supplyCount[duchy] = 12;
      468:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      532:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      468:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3468:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2468:  146:      state->deckCount[i] = 0;
     9872:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7404:  149:	  state->deck[i][j] = estate;
     7404:  150:	  state->deckCount[i]++;
        -:  151:	}
    19744:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17276:  154:	  state->deck[i][j] = copper;
    17276:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3468:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2468:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3468:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2468:  172:      state->handCount[i] = 0;
     2468:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2469:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2469:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2469:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2469:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30110:  220:  while (state->deckCount[player] > 0) {
    25172:  221:    card = floor(Random() * state->deckCount[player]);
    25172:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25172:  223:    newDeckPos++;
   143063:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
   117891:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25172:  227:    state->deckCount[player]--;
        -:  228:  }
    27641:  229:  for (i = 0; i < newDeckPos; i++) {
    25172:  230:    state->deck[player][i] = newDeck[i];
    25172:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2469:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      493:  539:    for (i = 0; i < state->discardCount[player];i++){
      492:  540:      state->deck[player][i] = state->discard[player][i];
      492:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      756:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
    #####: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
     1000: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
     1000: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
     1000: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
     1000: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3491: 1447:	  state->coins += 1;
        -: 1448:	}
     1509: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1509: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    40353:   14:int compare(const void* a, const void* b) {
    40353:   15:  if (*(int*)a > *(int*)b)
      110:   16:    return 1;
    40243:   17:  if (*(int*)a < *(int*)b)
    10310:   18:    return -1;
    29933:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      473:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      527:   83:  else if (numPlayers == 3)
        -:   84:    {
      527:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      473:   95:      state->supplyCount[estate] = 8;
      473:   96:      state->supplyCount[duchy] = 8;
      473:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      527:  101:      state->supplyCount[estate] = 12;
      527:  102:      state->supplyCount[duchy] = 12;
      527:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      473:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      527:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3527:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2527:  146:      state->deckCount[i] = 0;
    10108:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7581:  149:	  state->deck[i][j] = estate;
     7581:  150:	  state->deckCount[i]++;
        -:  151:	}
    20216:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17689:  154:	  state->deck[i][j] = copper;
    17689:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3527:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2527:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3527:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2527:  172:      state->handCount[i] = 0;
     2527:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2531:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2531:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2531:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2531:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30988:  220:  while (state->deckCount[player] > 0) {
    25926:  221:    card = floor(Random() * state->deckCount[player]);
    25926:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25926:  223:    newDeckPos++;
   116220:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    90294:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25926:  227:    state->deckCount[player]--;
        -:  228:  }
    28457:  229:  for (i = 0; i < newDeckPos; i++) {
    25926:  230:    state->deck[player][i] = newDeck[i];
    25926:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2531:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      660:  539:    for (i = 0; i < state->discardCount[player];i++){
      656:  540:      state->deck[player][i] = state->discard[player][i];
      656:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        4:  544:    state->deckCount[player] = state->discardCount[player];
        4:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        4:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        4:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        4:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        4:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        4:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        4:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  569:    state->deckCount[player]--;
        4:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5996:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5996:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5996:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5996:  582:    state->deckCount[player]--;
     5996:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      723:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
    #####: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
     1000: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
     1000: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
     1000: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
     1000: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3520: 1447:	  state->coins += 1;
        -: 1448:	}
     1480: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1480: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39612:   14:int compare(const void* a, const void* b) {
    39612:   15:  if (*(int*)a > *(int*)b)
      136:   16:    return 1;
    39476:   17:  if (*(int*)a < *(int*)b)
    10108:   18:    return -1;
    29368:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      490:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      510:   83:  else if (numPlayers == 3)
        -:   84:    {
      510:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      490:   95:      state->supplyCount[estate] = 8;
      490:   96:      state->supplyCount[duchy] = 8;
      490:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      510:  101:      state->supplyCount[estate] = 12;
      510:  102:      state->supplyCount[duchy] = 12;
      510:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      490:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      510:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3510:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2510:  146:      state->deckCount[i] = 0;
    10040:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7530:  149:	  state->deck[i][j] = estate;
     7530:  150:	  state->deckCount[i]++;
        -:  151:	}
    20080:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17570:  154:	  state->deck[i][j] = copper;
    17570:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3510:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2510:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3510:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2510:  172:      state->handCount[i] = 0;
     2510:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2512:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2512:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2512:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2512:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30609:  220:  while (state->deckCount[player] > 0) {
    25585:  221:    card = floor(Random() * state->deckCount[player]);
    25585:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25585:  223:    newDeckPos++;
   113722:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    88137:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25585:  227:    state->deckCount[player]--;
        -:  228:  }
    28097:  229:  for (i = 0; i < newDeckPos; i++) {
    25585:  230:    state->deck[player][i] = newDeck[i];
    25585:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2512:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      487:  539:    for (i = 0; i < state->discardCount[player];i++){
      485:  540:      state->deck[player][i] = state->discard[player][i];
      485:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      755:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        1: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      999: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      999: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      999: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      999: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3503: 1447:	  state->coins += 1;
        -: 1448:	}
     1497: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1497: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    39770:   14:int compare(const void* a, const void* b) {
    39770:   15:  if (*(int*)a > *(int*)b)
      582:   16:    return 1;
    39188:   17:  if (*(int*)a < *(int*)b)
    10199:   18:    return -1;
    28989:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      506:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      494:   83:  else if (numPlayers == 3)
        -:   84:    {
      494:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      506:   95:      state->supplyCount[estate] = 8;
      506:   96:      state->supplyCount[duchy] = 8;
      506:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      494:  101:      state->supplyCount[estate] = 12;
      494:  102:      state->supplyCount[duchy] = 12;
      494:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      506:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      494:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3494:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2494:  146:      state->deckCount[i] = 0;
     9976:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7482:  149:	  state->deck[i][j] = estate;
     7482:  150:	  state->deckCount[i]++;
        -:  151:	}
    19952:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17458:  154:	  state->deck[i][j] = copper;
    17458:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3494:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2494:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3494:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2494:  172:      state->handCount[i] = 0;
     2494:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2496:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2496:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2496:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2496:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30401:  220:  while (state->deckCount[player] > 0) {
    25409:  221:    card = floor(Random() * state->deckCount[player]);
    25409:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25409:  223:    newDeckPos++;
   124296:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    98887:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25409:  227:    state->deckCount[player]--;
        -:  228:  }
    27905:  229:  for (i = 0; i < newDeckPos; i++) {
    25409:  230:    state->deck[player][i] = newDeck[i];
    25409:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2496:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      471:  539:    for (i = 0; i < state->discardCount[player];i++){
      469:  540:      state->deck[player][i] = state->discard[player][i];
      469:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        2:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  569:    state->deckCount[player]--;
        2:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5998:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5998:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5998:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5998:  582:    state->deckCount[player]--;
     5998:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      742:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        2: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      998: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      998: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      998: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      998: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3516: 1447:	  state->coins += 1;
        -: 1448:	}
     1484: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1484: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    38073:   14:int compare(const void* a, const void* b) {
    38073:   15:  if (*(int*)a > *(int*)b)
      211:   16:    return 1;
    37862:   17:  if (*(int*)a < *(int*)b)
    10129:   18:    return -1;
    27733:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      489:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      511:   83:  else if (numPlayers == 3)
        -:   84:    {
      511:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      489:   95:      state->supplyCount[estate] = 8;
      489:   96:      state->supplyCount[duchy] = 8;
      489:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      511:  101:      state->supplyCount[estate] = 12;
      511:  102:      state->supplyCount[duchy] = 12;
      511:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      489:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      511:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3511:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2511:  146:      state->deckCount[i] = 0;
    10044:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7533:  149:	  state->deck[i][j] = estate;
     7533:  150:	  state->deckCount[i]++;
        -:  151:	}
    20088:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17577:  154:	  state->deck[i][j] = copper;
    17577:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3511:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2511:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3511:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2511:  172:      state->handCount[i] = 0;
     2511:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2512:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2512:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2512:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2512:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30215:  220:  while (state->deckCount[player] > 0) {
    25191:  221:    card = floor(Random() * state->deckCount[player]);
    25191:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25191:  223:    newDeckPos++;
    83208:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    58017:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25191:  227:    state->deckCount[player]--;
        -:  228:  }
    27703:  229:  for (i = 0; i < newDeckPos; i++) {
    25191:  230:    state->deck[player][i] = newDeck[i];
    25191:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2512:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
       82:  539:    for (i = 0; i < state->discardCount[player];i++){
       81:  540:      state->deck[player][i] = state->discard[player][i];
       81:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      747:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        3: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      997: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      997: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      997: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      997: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3474: 1447:	  state->coins += 1;
        -: 1448:	}
     1526: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1526: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    37470:   14:int compare(const void* a, const void* b) {
    37470:   15:  if (*(int*)a > *(int*)b)
       29:   16:    return 1;
    37441:   17:  if (*(int*)a < *(int*)b)
     9985:   18:    return -1;
    27456:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      506:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      494:   83:  else if (numPlayers == 3)
        -:   84:    {
      494:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      506:   95:      state->supplyCount[estate] = 8;
      506:   96:      state->supplyCount[duchy] = 8;
      506:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      494:  101:      state->supplyCount[estate] = 12;
      494:  102:      state->supplyCount[duchy] = 12;
      494:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      506:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      494:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3494:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2494:  146:      state->deckCount[i] = 0;
     9976:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7482:  149:	  state->deck[i][j] = estate;
     7482:  150:	  state->deckCount[i]++;
        -:  151:	}
    19952:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17458:  154:	  state->deck[i][j] = copper;
    17458:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3494:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2494:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3494:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2494:  172:      state->handCount[i] = 0;
     2494:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2495:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2495:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2495:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2495:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    29949:  220:  while (state->deckCount[player] > 0) {
    24959:  221:    card = floor(Random() * state->deckCount[player]);
    24959:  222:    newDeck[newDeckPos] = state->deck[player][card];
    24959:  223:    newDeckPos++;
    81603:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    56644:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    24959:  227:    state->deckCount[player]--;
        -:  228:  }
    27454:  229:  for (i = 0; i < newDeckPos; i++) {
    24959:  230:    state->deck[player][i] = newDeck[i];
    24959:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2495:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
       20:  539:    for (i = 0; i < state->discardCount[player];i++){
       19:  540:      state->deck[player][i] = state->discard[player][i];
       19:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      749:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
        2: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
      998: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
      998: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
      998: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
      998: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3497: 1447:	  state->coins += 1;
        -: 1448:	}
     1503: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1503: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newSmithy (struct gameState *state, int handPos);
        -:    9:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos);
        -:   10:int newAdventurer (struct gameState *state);
        -:   11:int newVillage (struct gameState *state, int handPos);
        -:   12:int newSea_hag (struct gameState *state, int handPos);
        -:   13:
    38349:   14:int compare(const void* a, const void* b) {
    38349:   15:  if (*(int*)a > *(int*)b)
      366:   16:    return 1;
    37983:   17:  if (*(int*)a < *(int*)b)
    10194:   18:    return -1;
    27789:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
     1000:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
     1000:   50:  SelectStream(1);
     1000:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
     1000:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     1000:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    11000:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
   110000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
   100000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     1000:   79:  if (numPlayers == 2)
        -:   80:    {
      493:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
      507:   83:  else if (numPlayers == 3)
        -:   84:    {
      507:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     1000:   93:  if (numPlayers == 2)
        -:   94:    {
      493:   95:      state->supplyCount[estate] = 8;
      493:   96:      state->supplyCount[duchy] = 8;
      493:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
      507:  101:      state->supplyCount[estate] = 12;
      507:  102:      state->supplyCount[duchy] = 12;
      507:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     1000:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  108:  state->supplyCount[silver] = 40;
     1000:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    21000:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
   165000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
   155000:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    10000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
     2000:  121:		  if (numPlayers == 2){ 
      493:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
      507:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     9000:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    10000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   145000:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     3507:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
     2507:  146:      state->deckCount[i] = 0;
    10028:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     7521:  149:	  state->deck[i][j] = estate;
     7521:  150:	  state->deckCount[i]++;
        -:  151:	}
    20056:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
    17549:  154:	  state->deck[i][j] = copper;
    17549:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     3507:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
     2507:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
     3507:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
     2507:  172:      state->handCount[i] = 0;
     2507:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    28000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    27000:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     1000:  188:  state->outpostPlayed = 0;
     1000:  189:  state->phase = 0;
     1000:  190:  state->numActions = 1;
     1000:  191:  state->numBuys = 1;
     1000:  192:  state->playedCardCount = 0;
     1000:  193:  state->whoseTurn = 0;
     1000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  198:  for (it = 0; it < 5; it++){
     5000:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
     1000:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
     1000:  204:  return 0;
        -:  205:}
        -:  206:
     2508:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     2508:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     2508:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
     2508:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    30218:  220:  while (state->deckCount[player] > 0) {
    25202:  221:    card = floor(Random() * state->deckCount[player]);
    25202:  222:    newDeck[newDeckPos] = state->deck[player][card];
    25202:  223:    newDeckPos++;
    86282:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
    61080:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    25202:  227:    state->deckCount[player]--;
        -:  228:  }
    27710:  229:  for (i = 0; i < newDeckPos; i++) {
    25202:  230:    state->deck[player][i] = newDeck[i];
    25202:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     2508:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     2000:  352:int whoseTurn(struct gameState *state) {
     2000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     6000:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     6000:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
      133:  539:    for (i = 0; i < state->discardCount[player];i++){
      132:  540:      state->deck[player][i] = state->discard[player][i];
      132:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        1:  544:    state->deckCount[player] = state->discardCount[player];
        1:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        1:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        1:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        1:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        1:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        1:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     5999:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     5999:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5999:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5999:  582:    state->deckCount[player]--;
     5999:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     6000:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     1000:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     1000:  659:  int currentPlayer = whoseTurn(state);
     1000:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     1000:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     1000:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     1000:  666:  int z = 0;// this is the counter for the temp hand
     1000:  667:  if (nextPlayer > (state->numPlayers - 1)){
      752:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
     1000:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:    
        -:  677:    /*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      } 
        -:  696:      return 0;        */
    #####:  697:      return newAdventurer (state);
        -:  698:			
        -:  699:    case council_room:
        -:  700:      //+4 Cards
    #####:  701:      for (i = 0; i < 4; i++)
        -:  702:	{
    #####:  703:	  drawCard(currentPlayer, state);
        -:  704:	}
        -:  705:			
        -:  706:      //+1 Buy
    #####:  707:      state->numBuys++;
        -:  708:			
        -:  709:      //Each other player draws a card
    #####:  710:      for (i = 0; i < state->numPlayers; i++)
        -:  711:	{
    #####:  712:	  if ( i != currentPlayer )
        -:  713:	    {
    #####:  714:	      drawCard(i, state);
        -:  715:	    }
        -:  716:	}
        -:  717:			
        -:  718:      //put played card in played card pile
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
        -:  720:			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case feast:
        -:  724:      //gain card with cost up to 5
        -:  725:      //Backup hand
    #####:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  727:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  728:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  729:      }
        -:  730:      //Backup hand
        -:  731:
        -:  732:      //Update Coins for Buy
    #####:  733:      updateCoins(currentPlayer, state, 5);
    #####:  734:      x = 1;//Condition to loop on
    #####:  735:      while( x == 1) {//Buy one card
    #####:  736:	if (supplyCount(choice1, state) <= 0){
        -:  737:	  if (DEBUG)
        -:  738:	    printf("None of that card left, sorry!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  742:	  }
        -:  743:	}
    #####:  744:	else if (state->coins < getCost(choice1)){
    #####:  745:	  printf("That card is too expensive!\n");
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:	  }
        -:  750:	}
        -:  751:	else{
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
    #####:  757:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  758:	  x = 0;//No more buying cards
        -:  759:
        -:  760:	  if (DEBUG){
        -:  761:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:	  }
        -:  763:
        -:  764:	}
        -:  765:      }     
        -:  766:
        -:  767:      //Reset Hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:	state->hand[currentPlayer][i] = temphand[i];
    #####:  770:	temphand[i] = -1;
        -:  771:      }
        -:  772:      //Reset Hand
        -:  773:      			
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
        -:  815:    
        -:  816:	/*
        -:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
        -:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
        -:  821:	  return -1;
        -:  822:	}
        -:  823:
        -:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
        -:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
        -:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
        -:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
        -:  834:	      discardCard(i, currentPlayer, state, 0);			
        -:  835:	      break;
        -:  836:	    }
        -:  837:	}     
        -:  838:	return 0; */
        -:  839:
    #####:  840:      return newRemodel (state, choice1, choice2, handPos);
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return newSmithy(state, handPos);
        -:  845:      /* comment out for refactor
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;  
        -:  854:      */
        -:  855:		
        -:  856:    case village:
        -:  857:    
        -:  858:    	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;    */
     1000:  868:      return newVillage (state, handPos);
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
    #####:  896:		isGameOver(state);
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
    #####:  913:	    isGameOver(state);
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
        -:  973:			{
    #####:  974:			  drawCard(i, state);
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1051:	  state->coins += 2;
        -: 1052:	}
        -: 1053:		    
    #####: 1054:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1055:	  drawCard(currentPlayer, state);
    #####: 1056:	  drawCard(currentPlayer, state);
        -: 1057:	}
        -: 1058:	else{//Action Card
    #####: 1059:	  state->numActions = state->numActions + 2;
        -: 1060:	}
        -: 1061:      }
        -: 1062:	    
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case ambassador:
    #####: 1066:      j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:      if (choice2 > 2 || choice2 < 0)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (choice1 == handPos)
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:	{
    #####: 1080:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:	    {
    #####: 1082:	      j++;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (j < choice2)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
        -: 1090:      if (DEBUG) 
        -: 1091:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:      //increase supply count for choosen card by amount being discarded
    #####: 1094:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:      //each other player gains a copy of revealed card
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
        -: 1100:	    {
    #####: 1101:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:      //trash copies of cards returned to supply
    #####: 1109:      for (j = 0; j < choice2; j++)
        -: 1110:	{
    #####: 1111:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	    {
    #####: 1113:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:		{
    #####: 1115:		  discardCard(i, currentPlayer, state, 1);
    #####: 1116:		  break;
        -: 1117:		}
        -: 1118:	    }
        -: 1119:	}			
        -: 1120:
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case cutpurse:
        -: 1124:
    #####: 1125:      updateCoins(currentPlayer, state, 2);
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
    #####: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
    #####: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
    #####: 1134:		      discardCard(j, i, state, 0);
    #####: 1135:		      break;
        -: 1136:		    }
    #####: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
    #####: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
    #####: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:      return 0;
        -: 1156:
        -: 1157:		
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
        -: 1200:    
        -: 1201:    /*
        -: 1202:      for (i = 0; i < state->numPlayers; i++){
        -: 1203:	if (i != currentPlayer){
        -: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1205:	  state->deckCount[i]--;
        -: 1206:	  state->discardCount[i]++;
        -: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
        -: 1210:      return 0;  */
    #####: 1211:      return newSea_hag (state, handPos);
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
    #####: 1247:int newSmithy (struct gameState *state, int handPos) {
        -: 1248:	//refactored code with bug 
    #####: 1249:	int currentPlayer = whoseTurn(state);
        -: 1250:		
    #####: 1251:	int i = 0;
    #####: 1252:      for (i = 0; i <= 3; i++) // changed loop from i<3 to i<=3
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card from hand
    #####: 1258:      discardCard(handPos, currentPlayer, state, 1); // changed last number from zero to one
    #####: 1259:      return 0;  
        -: 1260:
        -: 1261:}
        -: 1262:
    #####: 1263:int newRemodel (struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1264:
        -: 1265:	//refactored code with bug 
    #####: 1266:	int currentPlayer = whoseTurn(state);
        -: 1267:	int j;
        -: 1268:	int i;
        -: 1269:	
    #####: 1270:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1271:
    #####: 1272:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) // changed from + 2 to + 3
        -: 1273:	{
    #####: 1274:	  return -1;
        -: 1275:	}
        -: 1276:
    #####: 1277:      gainCard(choice2, state, 0, currentPlayer);
        -: 1278:
        -: 1279:      //discard card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
        -: 1282:      //discard trashed card
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == j)
        -: 1286:	    {
    #####: 1287:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}     
        -: 1291:	
    #####: 1292:	return 0; 
        -: 1293:	}
        -: 1294:
    #####: 1295:int newAdventurer (struct gameState *state) {
        -: 1296:
        -: 1297:	//refactored code with bug 
    #####: 1298:	int currentPlayer = whoseTurn(state);
    #####: 1299:	int drawntreasure=0;
        -: 1300:	int cardDrawn;
        -: 1301:	int i;
        -: 1302:  	//int temphand[MAX_HAND];// moved above the if statement
    #####: 1303:  	int temphand[i]; //= -1;
        -: 1304:	int z;
        -: 1305:	
    #####: 1306:      while(drawntreasure<2){
    #####: 1307:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1308:	  shuffle(currentPlayer, state);
        -: 1309:	}
    #####: 1310:	drawCard(currentPlayer, state);
    #####: 1311:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1312:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1313:	  drawntreasure++;
        -: 1314:	else{ 
    #####: 1315:	  temphand[z]=cardDrawn;
    #####: 1316:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1317:	  z++;
        -: 1318:	}
        -: 1319:      }
    #####: 1320:      while(z-1>=0){
    #####: 1321:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1322:	z=z-1;
        -: 1323:      }
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:	}
        -: 1327:	
        -: 1328:	
     1000: 1329:int newVillage (struct gameState *state, int handPos) {
        -: 1330:		//refactor - no bug i hope in this one
     1000: 1331:		int currentPlayer = whoseTurn(state);
        -: 1332:
        -: 1333:		//+1 Card
     1000: 1334:      drawCard(currentPlayer, state);
        -: 1335:			
        -: 1336:      //+2 Actions
     1000: 1337:      state->numActions = state->numActions + 2;
        -: 1338:			
        -: 1339:      //discard played card from hand
     1000: 1340:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1341:      return 0;   
        -: 1342:}
        -: 1343:
    #####: 1344:int newSea_hag (struct gameState *state, int handPos) {
        -: 1345:		//refactor
    #####: 1346:		int currentPlayer = whoseTurn(state);
        -: 1347:		int i;
        -: 1348:		
    #####: 1349:	for (i = 1; i < state->numPlayers; i--){ // changed loop for i to initialize at 1 and decremented instead of incrementing
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1352:	  state->deckCount[i]--;
    #####: 1353:	  state->discardCount[i]++;
    #####: 1354:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1355:	}
        -: 1356:      }
    #####: 1357:      return 0; 
        -: 1358:}
        -: 1359:
     1000: 1360:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1361:{
        -: 1362:	
        -: 1363:  //if card is not trashed, added to Played pile 
     1000: 1364:  if (trashFlag < 1)
        -: 1365:    {
        -: 1366:      //add card to played pile
     1000: 1367:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1368:      state->playedCardCount++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //set played card to -1
     1000: 1372:  state->hand[currentPlayer][handPos] = -1;
        -: 1373:	
        -: 1374:  //remove card from player's hand
     1000: 1375:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1376:    {
        -: 1377:      //reduce number of cards in hand
    #####: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
     1000: 1380:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1381:    {
        -: 1382:      //reduce number of cards in hand
    #####: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:  else 	
        -: 1386:    {
        -: 1387:      //replace discarded card with last card in hand
     1000: 1388:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1389:      //set last card to -1
     1000: 1390:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1391:      //reduce number of cards in hand
     1000: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:	
     1000: 1395:  return 0;
        -: 1396:}
        -: 1397:
    #####: 1398:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1399:{
        -: 1400:  //Note: supplyPos is enum of choosen card
        -: 1401:	
        -: 1402:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1403:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1404:    {
    #####: 1405:      return -1;
        -: 1406:    }
        -: 1407:	
        -: 1408:  //added card for [whoseTurn] current player:
        -: 1409:  // toFlag = 0 : add to discard
        -: 1410:  // toFlag = 1 : add to deck
        -: 1411:  // toFlag = 2 : add to hand
        -: 1412:
    #####: 1413:  if (toFlag == 1)
        -: 1414:    {
    #####: 1415:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1416:      state->deckCount[player]++;
        -: 1417:    }
    #####: 1418:  else if (toFlag == 2)
        -: 1419:    {
    #####: 1420:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1421:      state->handCount[player]++;
        -: 1422:    }
        -: 1423:  else
        -: 1424:    {
    #####: 1425:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1426:      state->discardCount[player]++;
        -: 1427:    }
        -: 1428:	
        -: 1429:  //decrease number in supply pile
    #####: 1430:  state->supplyCount[supplyPos]--;
        -: 1431:	 
    #####: 1432:  return 0;
        -: 1433:}
        -: 1434:
     1000: 1435:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1436:{
        -: 1437:  int i;
        -: 1438:	
        -: 1439:  //reset coin count
     1000: 1440:  state->coins = 0;
        -: 1441:
        -: 1442:  //add coins for each Treasure card in player's hand
     6000: 1443:  for (i = 0; i < state->handCount[player]; i++)
        -: 1444:    {
     5000: 1445:      if (state->hand[player][i] == copper)
        -: 1446:	{
     3514: 1447:	  state->coins += 1;
        -: 1448:	}
     1486: 1449:      else if (state->hand[player][i] == silver)
        -: 1450:	{
    #####: 1451:	  state->coins += 2;
        -: 1452:	}
     1486: 1453:      else if (state->hand[player][i] == gold)
        -: 1454:	{
    #####: 1455:	  state->coins += 3;
        -: 1456:	}	
        -: 1457:    }	
        -: 1458:
        -: 1459:  //add bonus
     1000: 1460:  state->coins += bonus;
        -: 1461:
     1000: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
